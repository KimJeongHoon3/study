rabbitMQ : 다양한 분산 소프트웨어 아키텍처를 만들기 위한 매우 강력하고 가벼운 도구.. 메세지 지향 미들웨어!

-특징
    -오픈소스 : 피보탈 소프트웨어 소유, 모질라 공공 라이선스로 배포..
    -AMQP스펙을 구현한 메세지 브로커로 대부분의 프로그래밍 언어와 주요 플랫폼의 클라이언트도 제공
        -AMQP기반이나, MQTT,STOMP,XMPP 등 다양한 프로토콜도 제공
    -경량성 : 관리자 UI 플러그인 + 코어 앱 => 메모리 40MB 사용,,(물론 큐에 전송되는 메세지 증가함에 따라 메모리사용량도 증가)
    -다양한 클라이언트 라이브러리 => 다른 언어로 만들어진 프로그램간에 다리역할
    -유연한 성능과 안정성 제어가능: 배달하기전에 디스크에 저장도 가능.. 클러스터를 설정할때 큐를 HA로 설정해서 여러 노드에 걸쳐 저장하도록가능(일부서버장애시 메시지 손실없게할수잇음)
    -서드파티 플러그인 : rabbitMQ를 직접 사용해 메시지를 데이터 베이스에 직접 저장하는 서브파티 플러그인도 있음
    -얼랭(프로그래밍언어..)으로 구현 : 얼랭을 통해서(엄밀히는 얼랭의 IPC.. Inter-Process Communication) 클러스터 내 rabiitMQ간에 메세지, 상태, 설정 등을 공유하여 서버를 동기화.. 
    -동일한 메세지를 여러 컨슈머가 가져갈수있음..(kafka랑 같네..?)

    -federation 플러그인을 사용하면 federation으로 연결된 rabbitMQ 인스턴스에 데이터를 전달하게된다.. 그렇게되면 federation된 서버에서도 동일한 데이터를 처리하게됨.. (다른 용도로 데이터처리를 위해서 사용할수도있을듯한데..) 
        -서로간에 federation을 설정할수도있어서 두곳에 front의 pub하는 앱을 두면 두곳에서 전달하는 데이터를 모두 처리할수있다..
        -예를들면, 서울 데이터센터에 A(pub), B(sub), C(rabiitinstance) 가 있고, 대구 데이터센터에 D(pub), E(sub), F(rabbitinstance) 가 있을때
            A에서 pub하여 C로 데이터가 들어가게되면 플러그인을 통해(WAN) 대구 데이터센터의 F로 전달되어 B와 E는 동일한 데이터를 처리한다. 
            이때 A가 pub한거를 E가 처리하고 반대로 D가 pub한거를 B또한 처리하게된다..
            
-AMQ 모델
    -중요개념
        -exchange : 메세지 브로커에서 큐에 메세지를 전달하는 컴포넌트
            -rabiitMQ에서 메세지를 적절한 목적지로 전달하기 위해 필요,,
            -메세지를 수신하고 메세지를 보낼 위치를 결정..
            -여러 유형이 있음.. 직접 커스텀도 가능..
        -queue : 메세지를 저장하는 디스크상이나 메모리상의 자료구조
            -수신한 메세지를 저장하는 역할
            -설정에 따라 메모리에만 보관하거나 소비자에게 전달하기 전에 선입선출 순서로 메세지를 디스크에 보관하는지 결정할수잇음
        -binding : 익스체인지에 전달된 메세지가 어떤 큐에 저장돼야 하는지 정의하는 컴포넌트
            -바인딩과 바인딩키는 익스체인지가 어떤 큐에 메세지를 전달해야하는지를 의미..
            -단순하게 사용하면 라우팅키는 큐이름..
            ???????????
            -바인딩키와 라우팅키.. 이부분 다시확인해봐야할듯
            ????????

    -exchange에서 queue로 메세지를 라우팅 하는 방법이 동적이다... 익스체인지와 큐간의 이러한 연결과 메세지 라우팅 동적 특성은 메세지 지향 아키텍처를 구현하는 기본요소..


2장 rabbitMQ와 에플리케이션 아키텍처
    -RPC전송으로서의 AMQP  
        -RPC : Remote Procedure Call이라는 이야기로 원격 컴퓨터 프로그램의 메소드를 실행시키는것이다.. 
            -웹에서 API를 호출하는것도 일종의 RPC패턴을 사용한것임
            -그러나 웹과 다른점은 AMQP는 사용자만 서버의 함수를 호출하는것이아닌, 서버또한 사용자의 함수를 호출하는방식이다.. 즉 명령을 상호간에 하게된다
            

