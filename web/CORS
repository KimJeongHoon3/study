CORS
-CORS 관련이슈는 CORS정책을 위반했기때문에 나오는것!
    -CORS정책은?
        -Cross-Origin Resource Sharing 의 줄임말로, origin(protocol+host+port)이 다를때 Resource를 공유해주는 정책이다
        -예를들어 front와 같은 서버의 resource를 가져올때는 origin이 같기때문에 문제가 생기지않지만, front에서 자신의 도메인과다른 api를 호출하여 데이터를 뿌려준다하면 문제가 발생할수있다(브라우저 입장에서 origin이 다르기때문..)
        -웹이라는 오픈스페이스 환경에서 다른 출처에 있는 리소스를 가져와서 사용하는 일은 굉장히 흔한 일이라 무작정 막을 수도 없는 노릇이니 몇 가지 예외 조항을 두고 이 조항에 해당하는 리소스 요청은 출처가 다르더라도 허용하기로하였고 CORS정책을 지킨 리소스 요청이 해당 문제를 해결할수있게되는것이다
		-원칙적으로는 동일한 origin이 아니면 브라우저가 막도록 되어있지만(보안 등 기타이유로) 다 막을수 없으니 CORS정책에 맞으면 origin이 달라도 허용해주자는것!
-서버는 CORS를 위반하더라도 정상적으로 응답을 해주고, 응답의 파기 여부는 브라우저가 결정한다                

-CORS 작동방법
    -기본적으로 웹 클라이언트 어플리케이션이 다른 출처의 리소스를 요청할 때는 HTTP 프로토콜을 사용하여 요청을 보내게 되는데, 이때 브라우저는 요청 헤더에 Origin이라는 필드에 요청을 보내는 출처를 함께 담아보낸다.
        ex)Origin: https://evan-moon.github.io
    -이후 서버가 이 요청에 대한 응답을 할 때 응답 헤더의 Access-Control-Allow-Origin이라는 값에 “이 리소스를 접근하는 것이 허용된 출처”를 내려주고, 이후 응답을 받은 브라우저는 자신이 보냈던 요청의 Origin과 서버가 보내준 응답의 Access-Control-Allow-Origin을 비교해본 후 이 응답이 유효한 응답인지 아닌지를 결정한다.
    -그러나 CORS가 동작하는 방식은 한가지가 아니라 세가지의 시나리오에 따라 변경된다함..
        -PreflightRequest (가장 일반적으로 사용됨)
            -예비 요청을 Preflight라고 부르는 것이며, 이 예비 요청에는 HTTP 메소드 중 OPTIONS 메소드가 사용된다.
                -예비 요청의 역할은 본 요청을 보내기 전에 브라우저 스스로 이 요청을 보내는 것이 안전한지 확인하는 것이다.
            작동방법
                -우리가 자바스크립트의 fetch API를 사용하여 브라우저에게 리소스를 받아오라는 명령을 내리면 브라우저는 서버에게 예비 요청을 먼저 보내고, 서버는 이 예비 요청에 대한 응답으로 현재 자신이 어떤 것들을 허용하고, 어떤 것들을 금지하고 있는지에 대한 정보를 응답 헤더에 담아서 브라우저에게 다시 보내주게 된다.
                -이후 브라우저는 자신이 보낸 예비 요청과 서버가 응답에 담아준 허용 정책을 비교한 후, 이 요청을 보내는 것이 안전하다고 판단되면 같은 엔드포인트로 다시 본 요청을 보내게 된다. 이후 서버가 이 본 요청에 대한 응답을 하면 브라우저는 최종적으로 이 응답 데이터를 자바스크립트에게 넘겨준다.
                => 여기서 브라우저가 보낸 origin과 서버에서 응답한 Access-Control-Allow-Origin이 다르면 CORS 정책 위반이다
        -Simple Request(단순요청)
            -단순 요청은 예비 요청을 보내지 않고 바로 서버에게 본 요청부터 때려박은 후, 서버가 이에 대한 응답의 헤더에 Access-Control-Allow-Origin과 같은 값을 보내주면 그때 브라우저가 CORS 정책 위반 여부를 검사하는 방식이다. 
            -하지만 아무 때나 단순 요청을 사용할 수 있는 것은 아니고, 특정 조건을 만족하는 경우에만 예비 요청을 생략할 수 있다. 아래의 조건이 만족해야함
                1)요청의 메소드는 GET, HEAD, POST 중 하나여야 한다.
                2)Accept, Accept-Language, Content-Language, Content-Type, DPR, Downlink, Save-Data, Viewport-Width, Width를 제외한 헤더를 사용하면 안된다.
                3)만약 Content-Type를 사용하는 경우에는 application/x-www-form-urlencoded, multipart/form-data, text/plain만 허용된다.
	    -이런 현상이 나타나기 쉽지않음
        -Credentialed Request
	    - 보안 강화하고 싶을때 사용
	    - credentials 옵션은 3가지를 사용가능
		-same-origin(기본값) : 같은 origin간 요청에만 인증정보 담음
		-include : 모든 요청에 인증정보담음
		-omit : 모든 요청에 인증정보 담지않음
		- => 만약 인증정보를 담게되면 브라우저는 더 깐깐하게 체크.. 예를들어, include를 사용하였을경우, Access-Control-Allow-Origin는 *을 넘겨주면 브라우저에서 안띄워줌.. 명시적인 URL이 적혀있어야함

내용출처(무지설명굿) : https://evan-moon.github.io/2020/05/21/about-cors/

심심하면 참고 : https://stackoverflow.com/questions/62569594/request-header-field-access-control-allow-origin-is-not-allowed-by-access-contr
        https://stackoverflow.com/questions/25727306/request-header-field-access-control-allow-headers-is-not-allowed-by-access-contr
        https://hochoon-dev.tistory.com/m/entry/CORS-에러-해결하기
        https://stackoverflow.com/questions/32500073/request-header-field-access-control-allow-headers-is-not-allowed-by-itself-in-pr

        
-spring boot 적용방법

    @Configuration
    public class WebConfig implements WebMvcConfigurer {
        @Override
        public void addCorsMappings(CorsRegistry registry) {
            registry.addMapping("/**");
        }
    }
    Default값은 아래와 같습니다.

    Allow all origins.
    Allow "simple" methods GET, HEAD and POST.
    Allow all headers.
    Set max age to 1800 seconds (30 minutes).

    침고: https://dev-pengun.tistory.com/m/entry/Spring-Boot-CORS-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0

    또는

    @Component
    public class CorsFilter extends OncePerRequestFilter {

        @Override
        protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
            response.addHeader("Access-Control-Allow-Origin", "*");
            response.addHeader("Access-Control-Allow-Methods", "POST, GET, OPTIONS, PUT");
            response.addHeader("Access-Control-Max-Age", "3600");
            response.addHeader("Access-Control-Allow-Headers", "Authorization");
            response.addHeader("Access-Control-Allow-Headers", "Content-Type, bt-token");

            if("OPTIONS".equalsIgnoreCase(request.getMethod())) {
                response.setStatus(HttpServletResponse.SC_OK);
            } // end if("OPTIONS".equalsIgnoreCase(request.getMethod()))
            else {
                filterChain.doFilter(request, response);
            } // end else
        }
    }