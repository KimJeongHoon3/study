이것이 mysql 이다 추가

SQL기본
    -like 사용시 '%' or '_' 가 먼저 나오면 해당 컬럼에 인덱스가 잡혀있어도 full scan을 진행한다..
    -Any, Some, All
        -Any : 조건들중 하나만 만족하면됨
            -Any를 Equal과 같이쓴다면 In과 같은효과
            - =any(서브쿼리) 와 in(서브쿼리결) 는 같은의미!

        -All : 모두 만족하는것
        -Some : Any와 동일

    -order by
        -여러개 사용시에는 order by [열1] [ASC|DESC], [열2] [ASC|DESC] ...
        -모든 구문의 제일 뒤에와야함
        -성능떨어뜨릴수있으므로 꼭 필요한경우가 아니라면 사용자제..

    -distinct
        -중복제거

    -LIMIT
        -LIMIT 0,5 == LIMIT 5 OFFSET 0 == LIMIT 5
        -MYSQL의 부담줄여줌..

    -CREATE TABLE [테이블명] (SELECT [복사할 열] FROM [복사할 테이블명])
        -제약조건에 대한것은 복사안댐

    -COUNT
        -COUNT(*)은 null 값을 포함하여 계산
        -COUNT(열)은 null 값 포함x

    -DML
        -insert,update,delet,select 와 같이 데이터를 조작하는데 사용되는 언어
        -트랜젝션
            -테이블의 데이터를 변경(입력, 수정, 삭제) 할때 실제 테이블에 완전히 적용하지않고, 임시로 적용시키는것!! 그래서 문제생기면 중간에 취소할수있음(ROLLBACK, COMMIT개념)

    -DDL(데이터 정의 언어)
        -DB, 테이블, 뷰, 인덱스 등의 데이터베이스 개체를 생성/삭제/변경 하는 역할,,
        -DDL은 트랜잭션개념이 없음! 실행즉시 적용!

    -DCL(데이터 제어 언어(Data Control Language))
        - 사용자에게 어떤 권한을 부여하거나 빼앗을때 사용하는 구문..(GRANT, REVOKE, DENY)

    -AUTO_INCREMENT
        -자동으로 1부터 증가하는 값을 입력해준다
        -지정할때 반드시 PK or UNIQUE KEY로 지정해야함
        -SELECT LAST_INCREMENT_ID(); 를 통해서 마지막에 입력된 increment값 볼수 있음
        -set @@auto_increment_increment=숫자;
            -특정 숫자만큼 increment 돼라!

    -INSERT INTO .. SELECT
        -select 한 데이터 특정 table로 insert 가능

    -DELETE vs TRUNCATE vs DROP
        -DML인 DELETE는 트랜잭션 로그를 기록하는 작업때문에 삭제가 오래걸린다..
        -DDL은 트랜잭션이 없다.. 그러므로 DDL인 DROP은 상당히 빠르게 진행된다
        -TRUNCATE는 DELETE와 유사하지만, 트랜잭션 로그를 기록하지않아서 속도가빠르다..
        => 전체 데이터 날릴때 스키마 남겨야한다면 TRUNCATE, 그냥 테이블도 없애도되면 DROP

    -INSERT
        -INSERT INTO ~ VALUES() ON DUPLICATE KEY UPDATE 열=값, 열=값 ...
            -PK 중복시 UPDATE!
            -아니면 INSERT!
        -INSERT IGNORE
            -INSERT시 PK중복이라던지 기타 오류가 발생하더라도 오류를 발생시키지않고 무시하고 넘어간다

    -WITH 절과 CTE
        -WITH절은 CTE(Common Table Expression)를 표현하기 위한 구문으로, 8.0 부터 사용가능!
        -CTE는 기존의 뷰, 파생테이블, 임시테이블 등으로 사용되던 것을 대체가능
        -CTE는 "재귀적 CTE"와 "비재귀적 CTE" 가 있다
        -비재귀적 CTE
            -복잡한 쿼리문을 단순화 시키는데 적합..
            -WITH CTE_테이블명(열 이름) //테이블 생성하는것과 유사..
            AS
            (
                쿼리문
            )
                [//이렇게 여러개 정의도 가능하며, 상위의 CTE_테이블을 사용할수있음(상위에서 하위는 못읽음)
                CTE 테이블명(열 이름)
                AS(쿼리문)

                CTE 테이블명(열 이름)
                AS(쿼리문)
                ...
                ] 
            SELECT 열 이름 FROM CTE_테이블명;


SQL 고급
    -숫자데이터 형식
        -TINYINT / 1바이트 / -128 ~ 127
        -SMALLINT / 2바이트 / -32768~32767
        -INT / 4바이트 / 약 -21억 ~ 21억
        -BIGINT / 8바이트 / 약 -900경 ~ 900경
        -FLOAT / 4바이트 / -3.40E+38 ~ -1.17E-38 (소수점 아래 7자리까지표현)
        -DECIMAL(m,[d]) / 5~17바이트 / -10^38+1 ~ +10^38-1 (전체 자릿수(m)와 소수점 이하 자릿수(d)를 가진 숫자형 ex. decimal(5,2)는 전체자릿수 5자리로하되, 그 중 소수점 이하를 2자리로하겠다는 뜻 123.12)
        -위의 모든 값을 UNSIGNED 예약어를 붙여서 사용할수있고, 이렇게되면 0부터 시작함
    -문자데이터 형식
        -CHAR(n)
            -길이 고정..
            -n이 100인데, 글자 3글자면썼다면 나머지는 다 공백으로 채워짐..
            -1~255바이트까지 들어감
            -내부적으로 영어는 1바이트, 한글은 3바이트
        -VARCHAR(n)
            -가변길이
            -n이 100인데, 글자 3글자만 썼다면 딱 3자리만 사용
            -1~65535바이트까지 들어감
            -내부적으로 영어를 1바이트, 한글은 3바이트
        -TEXT
            -대용량의 글자를 저장하기 위한 형식
            -1~65535바이트까지들어감
            ???그럼 Varchar와 무슨차이..?
        -LONGTEXT
            -1~4294967295 바이트까지 들어감
        -BLOB(Bianary Large OBject)
            -사진파일, 동영상파일, 문서파일 등의 대용량의 이진데이터를 저장하는데 사용

        -LONGBLOB
            -1~4294967295 바이트까지 들어감
        -ENUM
        -SET
        -VARCHAR 보다 CHAR가 insert, update시 일반적으로 더 좋은성능을 발휘한다함..
    -날짜와 시간 데이터 형식
        -DATE
            -'YYYY-MM-DD'
        -DATETIME        
            -'YYYY-MM-DD HH:MM:SS'
        -TIMESTAMP
            -'YYYY-MM-DD HH:MM:SS'
            -time_zone 시스템변수와 관련이 있으며 UTC 시간대 변환하여 저장
    
    -변수의 사용
        -SET @변수이름 = 변수의 값;  //변수선언 및 값 대입
        -SELECT @변수이름; // 변수의 값 출력
        -@변수 는 전역변수와 같은개념이고, 프로시저 내부에서 사용하는 변수는 지역변수와 같은개념이다
        -session 사라지면 끝
        -이런식으로 사용가능 
            -
            SET @myVar1 = 3;
            PREPARE myQuery
                FROM 'SELECT * FROM table LIMIT ?'
            EXECUTE myQuery USING @myVar1;

            *PREPARE 쿼리이름 FROM '쿼리문'
            *EXECUTE 쿼리이름 USING 변수;

    -MYSQL 내장함수
        -제어흐름함수
            -IF
                -IF(조건,'참','거짓')
            -IFNULL(수식1,수식2)
                -IFNULL(null,'가') =>가
                -IFNULL('hi','가') =>hi
            -NULLIF(수식1,수식2)
                -수식1,2이 같으면 null 반환
                -NULLIF(100,100) => null 출력
                -NULLIF(200,100) => 200출력
            -CASE ~ WHEN ~ ELSE ~ END
                -연산자로 분류
                -다중분기가능
                CASE 10
                    WHEN 1 THEN '일'
                    WHEN 10 THEN '십'
                    WHEN 20 THEN '이십'
                    ELSE '몰라'
                END
        -문자열 함수
            -BIT_LENGTH(문자열), CHAR_LENGTH(문자열), LENGTH(문자열)
                -LENGTH는 해당 문자열의 바이트 크기를 반환한다. 즉, 한글3글자면 mysql에서 9바이트를 반환해줌.. 상당히 유용하게 쓰일수 있을듯
            -CONCAT(문자열1, 문자열2) , CONCAT_WS(구분자, 문자열1, 문자열2 ...)
                -CONCAT_WS는 구분자를 포함하여 문자열들을 더해준다..
                ex) SELECT CONCAT_WS('/','2025','10','28')
                    => 2025/10/28
            -FORMAT(숫자, 소수점자릿수)
                -1000 단위마다 콤마까지 찍어준다..
                ex) SELECT FORMAT(123456.123456,4)
                    => 123,456.1235
            -BIN(숫자), HEX(숫자), OCT(숫자)
                -2진수, 16진수, 8진수 반환
            -INSERT(기준문자열, 위치, 길이, 삽입할 문자열)
            -LEFT(문자열, 길이), RIGHT(문자열,길이)
                -왼쪽 또는 오른쪽에서 길이만큼 문자열 반환
            -UPPER(문자열), LOWER(문자열)

            -LPAD(문자열,길이,채울문자열), RPAD(문자열,길이,채울문자열)
                -문자열을 길이 만큼 늘린후 왼쪽 또는 오른쪽으로 채운다
            
            252page 참고..

        -시스템 정보함수
            -USER(), DATABASE()
                -현재 사용자와(=current_user()와 동일) 선택된 데이터베이스 반환
            -FOUND_ROWS()
                -바로 앞의 select문에서 조회된 행의 갯수 반환
            -ROW_COUNT()
                -바로 앞의 INSERT,UPDATE, DELETE문에서 입력, 수정, 삭제된 행의 개수를 구한다
            -VERSION()
                -mysql version 리턴
    
        -MYSQL에서 바로 데이터를 읽을수 있는데, 이를 위해서는 두가지 작업이필요하다(대용량일경우..)
            -최대 패킷크기(max_allowed_packet)을 수정해줘야한다
            -업로드/다운로드 할 폴더 경로를 별도로 허용해 줘야한다(secure_file_priv)

            => my.ini에서!
        -INTO OUTFILE 문을 사용해서 DB에 저장된 파일을 다운받을수있음!
        -INTO DUMPFILE 문을 사용해서 DB에 저장된 바이너리파일(영화파일같은..)을 다운받을수있다..

    -피벗(PIVOT)
        -한 열에 포함된 여러 값을 출력하고, 이를 여러 열로 변환하여 테이블 반환식을 회전하고 필요하면 집계까지 수행하는것응ㄹ 말한다.. 즉, 행데이터를 열로 전환가능!


    -JOIN
        -select 컬럼들..
         from tbl1
           join tb12
           on tbl1.되도록인덱스컬럼=tbl2.되도록인덱스있는컬럼
         where tbl1.컬럼="데이터"

         실행순서는
         1)tbl1에서 "데이터"를 찾는다
         2)tb12의 데이터를 on절의 값으로 찾아서 가져온다
         3)tbl1과 tbl2의 데이터를 뿌려준다

        -2개 이상의 join
            from tbl1
              join tbl2
                on tbl1.xx=tbl2.xx   (1)
              join tbl3
                on tbl2.bb=tbl3.bb   (2)
            => 실행순서는 (1)로 데이터 찾은거를 기반으로 (2)를 찾는다!
            
        -아래 쿼리는 같은 결과를 반환한다
           -SELECT DISTINCT U.userID
            FROM usertbl U
              JOIN buytbl B
              ON U.userID=B.userID 
           -SELECT U.userID
            FROM usertbl U
            WHERE EXISTS (
                SELECT count(1)
                FROM buytbl B
                WHERE U.userID=B.userID
            )
            
        -OUTER JOIN
            -LEFT, RIGHT, FULL(이건 거의안씀)
                -만약 LEFT JOIN 일때 왼쪽테이블의 모든 데이터는 보여주되, join에 해당하는 값이 없으면 오른쪽 테이블에 있는 데이터는 null로 보여진다
        
        -CROSS JOIN
            -CROSS join 시 행의 갯수는 a테이블행 x b테이블행
            -on을 쓸필요가없음! 어차피 테이블의 한 행을 가지고 join 대상의 테이블 데이터 전체를 join해서 보여주니까!!
            -대량의 테스트 데이터 만들때 쓴다함.. 
        
        -SELF JOIN
            -하나의 테이블에 같은 데이터가 존재하되, 의미가 다르게 존재하는 경우에는 두 테이블을 서로 SELF JOIN 시켜서 정보를 확인
        
    -UNION / UNION ALL
        -열의 갯수가 맞고, 열의 데이터형식도 동일하거나 호환이되어야함
        -그냥 UNION은 중복데이터 알아서 제거해주고, UNION ALL은 모든 데이터 나옴

    -NOT IN / IN

    -SQL 프로그래밍
        DELIMITER $$      -- 기본적으로 mysql은 DELIMITER가 ; 이거인데, 프로시저안에 ;가 많이 들어가므로 어디까지 프로시저를 끊어야할지 알수없기때문에 DELIMITER를 $$로 바꿔준것! 다른형태로도 쓸수있음 ex) @@, \\, // 등등
        CREATE PROCEDURE 스토어드프로시저이름()
        BEGIN
            필요 내용들!
        END $$
        DELIMITER ;

        CALL 스토어드프로시저이름;

        -IF .. ELSE
            IF <조건> THEN
                SQL 문장
            ELSE IF <조건> THEN
                SQL 문장
            ELSE
                SQL 문장
            END IF;

            *실행해야할 문장이 여러개일때는 BEGIN .. END 로 묶어준다!

        -CASE 
            CASE
                WHEN <조건> THEN
                    SQL 문장
                WHEN <조건> THEN
                    SQL 문장
                WHEN <조건> THEN
                    SQL 문장
                ELSE
                    SQL 문장
            END CASE;

        -WHILE과 ITERATE / LEAVE
            myWhile : WHILE <조건> DO    -- myWhile과 같이 label 지정가능,, iterate를 쓰기위함
                [ITERATE myWhile;]      -- 지정한 label로 이동.. continue와 같음
                [LEAVE]                 -- break와 같음

            END WHILE;

        -오류처리
            DECLARE 액션 HANDLER FOR 오류조건 처리할문장;

            -액션: CONINUE나 EXIT가 오게되는데, EXIT CONTINUE 둘다 해당 "오류조건"을 만나면 "처리할문장"으로 이동
                -EXIT : 프로시저 빠져나옴
                -CONTINUE : 다시 다음문장 계속 실행.. 이를 잘못쓰면 계속 에러내뱉겠지?
            -오류조건: 어떤 ERROR를 핸들링 할것인지를 정의.. MYSQL의 오류코드 숫자, SQLSTATE '상태코드', SQLEXCEPTION, SQLWARNING, NOT FOUND 등이 올수 있음
            -처리할 문장: 여러 문장일 경우는 BEGIN .. END 로 묶어줘야함

            ex)
                DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
                BEGIN
                    SHOW ERRORS;  -- 오류 메세지 보여줌
                    SELECT '오류가 발생했네요. 작업은 취소시켜씃ㅂ니다.' AS '메세지';
                    ROLLBACK; -- 작업 rollback
                END
        
        -동적 SQL
            -쿼리문을 미리 준비하고 나중에 실행하는것을 '동적SQL'이라 부름
            
            1)PREPARE [쿼리이름] FROM [쿼리문] -- 쿼리문에 물음표를 넣어서 USING으로 처리가능
            2)EXECUTE [쿼리이름] [USING 변수명] -- USING 변수명이 물음표의 값을 대치해줌
            3)DEALLCOATE PREPARE [쿼리이름] -- 문장해제,, 해제 이후 EXECUTE실행안됨,, 만약 해제안시키면 session 종료시 모두 해제

            여기 자세하게 설명잘해주는듯함 : http://www.mysqlkorea.com/sub.html?mcode=manual&scode=01&m_no=21675&cat1=13&cat2=385&cat3=0&lang=k

테이블과 뷰
    -테이블
        -create table [이름](
            컬럼들.. 
        )
        -5.0 부터 테이블 압축가능! 
            -CREATE TABLE 테이블이름 (열 정의 ...) ROW_FORMAT=COMPRESSED 로 가능!
                -압축하면 확실히 시간은 좀더 걸림 
        -AUTO_INCREMENT로 지정하면 PK나 UNIQUE KEY로 지정해주어야함
        -제약조건
            -데이터의 무결성을 지키기 위한 제한된 조건이 제약조건이다
            -CONSTRAINT 라고 하여 제약조건을 추가할수 있다..
            -table에 PK, UNIQUE, FK 등은 제약조건을 "추가" 하는 개념임! 그래서 create 문장에서 컬럼들 밑에 콤마로 이어줄수있는듯.. 
            -종류
                -Primary key
                    -클러스터형 인덱스 생성
                    -not null
                    -ALTER TABLE 테이블명
                        ADD CONSTRAINT pk이름
                            PRIMARY KEY (열들..)
                    -CREATE 문장에도 열 마지막에 위의 CONSTRAINT~ 부터 쓰면끝
                
                -foreign key
                    -외래키 테이블이 참조하는 기준테이블의 열은 반드시 PK or UNIQUE 제약조건이 되어있어야함
                    -기준테이블의 열과 외래키 테이블 열의 이름은 달라도 상관없음
                    -FK 지정시 ON DELETE CASECADE, ON UPDATE CASCADE 가능
                        -참조하고있는 기준테이블의 열 삭제시 같이 삭제 혹은 수정시 같이 수정

                -UNIQUE 제약조건
                    -중복x, null 허용
                    -alternative key 라고도함

                -CHECK 제약조건(mysql 8.0.16부터 지원)
                    -입력되는 데이터 점검하는 기능.. (where구문에 들어오는 조건과유사)
                        ex) 1980이상의 데이터만들어와라, 특정값만 들어와라 등등
                -DEFAULT 정의
                    -해당 컬럼에 데이터 넣지않을때 기본값으로 넣어주는것
                    -CREATE 할때 COLUMN 옆에 써주던지
                    -ALTER TABLE 테이블명 ALTER COLUMN 컬럼명 SET DEFAULT 값;

                -null값 허용
                    -null값이 많이 들어오면 가변길이인 varchar로!(char는 공간차지하니깐..)
                    
        -임시테이블
            -임시로 잠깐 사용되는테이블
            -CREATE TEMPORARY TABLE 테이블이름() ~~
            -session 내에서만 존재하기때문에 session 닫히면 사라짐
            -생성한 client만 접근가능(다른 client 접근 불가)
            -삭제 언제되나?
                -사용자가 drop table로 삭제가능
                -session 종료시
                -mysql 서비스 재시작될때도 사라짐
        
        -테이블의 열을 삭제하기위해서는 제약조건을 모두 없애야 가능!

        -FK가 걸려있으면 데이터 삽입 삭제시 제약이 많으므로 시스템변수를 사용하여 일시적으로 외래키 체크를 해제하게할수있다(그리고 작업다 끝나면 다시 ON으로 바꿔놔야겟지?)
            -SET foreign_key_checks=0; -- 외래키체크 OFF
            -SET foreign_key_checks=1; -- 외래키체크 ON

    -뷰
        -사용자 입장에서는 테이블과 동일하게사용됨..
        -뷰의 실체는 SELECT 문!! 걍 SELECT한 것들을 따로 보여주는느낌임..
        -뷰를 통해서 변경,수정,삭제도 가능! (하지만 권하진않는다함)
        -장점
            -보안도움 : SELECT해서 특정 데이터만 보여주게하므로
            -복잡한쿼리 단순화 : 이미 복잡한 쿼리로 뷰를 만들어놓으면 SELECT해서 뷰를 가져오면됨
        -뷰를 통해서 데이터 삭제나 수정이 안되는경우 
            -집계함수 사용한 뷰
            -UNION ALL, JOIN 등을 사용한 뷰
            -DISTINCT, GROUP BY 등을 사용한 뷰
            => 원본테이블 건드리기 애매한것들은 안된다고 보면 될듯
        -WITH CHECK OPTION을 view 만들때 마지막에 같이 적어주면 조건에 맞는 데이터만 view에 insert할 수 있다

    -테이블스페이스
        -대용량을 다룰때 테이블스페이스를 나누는게 필요함
        -데이터베이스의 테이블이 저장되는 논리적 공간이라면, 테이블스페이스는 테이블이 실제로 저장되는 물리적인 공간을 이야기함
        -특별히 지정하지않으면 ibdata1에 저장(시스템 테이블스페이스)
        -SHOW VARIABLES LIKE 'innodb_data_file_path'
            -값이 "ibdata1:12M:autoextend" 로 나옴(default)
            -파일명:파일크기:최대파일크기
            -이 값을 변경하여 테이블스페이스를 나눠줄수 있음
                ex) /data1/ibdata1:500M;/data2/ibdata2:500M;/data3/ibdata3:500M:autoextend:max:2000M
                
                테이블스페이스관련 내용 정리 : https://yoonperl.tistory.com/215
                추후에 공부 해볼것 


인덱스
    -수많은 데이터중에 필요한것을 빠르게 찾기위함
    -인덱스를 쓸지 full scan으로 할지는 MYSQL이 판단.. 성능보고..
    -불필요한 부분에 만들경우 오히려 성능저하유발.. ex) column에 데이터 종류가 딱 한개인데 인덱스를 잡으면 full scan으로..
    -장점
        -검색(select)속도 매우빠름
        -쿼리의 부하가 줄어들면, 전체 시스템 성능 향상
    -단점
        -인덱스가 DB의 공간을 차지..(통상 DB크기의 10%라함)
        -처음 인덱스잡는데 시간소요 많이들수있음
        -데이터변경작업(insert,update,delete) 자주일어날 경우에는 오히려 성능이 나빠질수 있음
    -종류
        -클러스터형 인덱스
            -영어사전과 유사
                -책의 내용자체가 이미 정렬,, 인덱스 자체가 책의 내용
            -하나만 생성가능
        -보조인덱스(비클러스터형 인덱스)
            -책 뒤에 찾아보기에서 찾는것과 유사
                -찾아보기에서 찾은뒤에 표시된 페이지로 가야지 실제 찾는 내용이 있는것과 같음
            -여러개생성가능

        => Primary key 로 지정한 열은 클러스터형 인덱스생성
           UNIQUE NOT NULL로 지정한 열은 클러스터형 인덱스생성
           UNIQUE(또는 UNIQUE NULL) 로 지저앟ㄴ 열은 보조 인덱스 생성
           PRIMARY KEY와 UNIQUE NOT NULL이 있으면 PK로 지정한 열에 클러스터형 인덱스 생성
           PK로 지정한 열은 데이터 오름차순으로 정렬됨..

        *튜닝이란?
            -SQL서버가 기존보다 더욱 좋은 성능을 내도록 하는 전반적인 방법론
                -응답시간 빨리하는것
                    -사용자 입장에서 실제 쿼리 수행 시간은 줄어들서 빠르다고 생각할수있지만, 시스템적으로 부하가 일어날수도 있으니 이를 염두할것
                -서버의 부하량 최소화
                    -한명 한명 사용자의 응답시간보다는 서버가 처리하는 총 작업량을 줄임으로써 시스템의 전반적인 성능을 향상시켜 서버가 더 많은 일을 할 수 있도록 하는것..
    -인덱스 생성시 주의사항
        -데이터가 많을떄 alter를 사용하여 unique나 primary key를 지정하면 시스템이 엄청나게 느려져 심각한 상황이 발생할수있음!!
    
    -인덱스의 내부작동
        -B-TREE(Balanced Tree)
            -데이터 추가하면서 노드가 정해진 크기 이상으로 채워지면 추가되는데, 이때 상위 노드 또한 함께 추가되어 하위노드들의 첫번째 값을 상위노드가 가지고잇음(MYSQL의 B-TREE를 가지고 추상적으로 설명한것)
            -MYSQL에서의 페이지는 노드와 같음
            -검색시 루트노드(맨 상위노드)에서부터 하위노드로 찾아감
            -기본적으로 MYSQL은 페이지당 16KB
        -페이지분할
            -해당 페이지에 데이터가 가득 차게되면(열심히 insert..), 새로운 페이지가 만들어지면서 페이지 분할 작업이 일어난다.. 이것이 너무 자주 많이 발생하게되면 성능에 이슈가 생길수있다.
            *그림참고 p386
        
        -작동원리
            -기본적으로 데이터가 insert되면 데이터페이지(heap영역)에 데이터가 들어간다..
            -클러스터 인덱스
                -아래의 순서로 생성
                    1) 데이터 페이지 정렬
                    2) 루트 페이지 생성
                    3) 루트 페이지에 데이터 페이지들의 첫번째값 셋팅 (리프 페이지 = 데이터페이지)
                -즉, 데이터 페이지가 정렬이 되기때문에 검색에 겁나 빠르다(보조 인덱스보다!)
                -범위로 검색시 매우 우수한 성능
                -하지만 데이터 변경시(삽입,삭제,수정) 루트페이지를 계속 정렬해주어야하고 페이지분할이 보조인덱스보다 더 많이 일어나서 느리다

            -보조 인덱스(넌 클러스터 인덱스)
                -아래의 순서로 생성
                    1) 인덱스로 구성한 열을 정렬
                    2) 실제 페이지의 위치포인터 생성(데이터페이지번호+오프셋)
                    3) 이를 기반으로 루트페이지 생성
                    *데이터 페이지 건드리지않고 인덱스 페이지 생성
                -아무래도 리프페이지와 데이터페이지가 일치하지않고, 리프페이지에서 데이터페이지를 찾아가기때문에 클러스터인덱스보다 검색속도가 느리다
                -그냥 데이터가 변경되면 기존 데이터의 뒤에다가 놓고, 인덱스페이지에서 정렬시키고 위치포인터만 배치시키기 때문에 페이지분할 부분에 있어서 클러스터 인덱스보다 무리가 덜감
                    -하지만 이 또한 너무 많은 인덱스를 create 하면 당연히 시스템에 무리가간다! 그만큼 계속 인덱스 페이지를 생성해야하므로!
                -데이터가 위치하는 주소값을 RID라고하고, key look up 이라고 실행계획에서는 표현한다
            
            => OLAP(On-Line Analytical Processing)와 같이 주로 검색을 사용하는것 에서는 인덱스를 많이 생성해도 크게 문제는 없지만, OLTP(On-Line Transaction Processing)와 같이 실시간으로 UPDATE/DELETE/INSERT 많이 되면 문제 생김

            -클러스터 인덱스 & 보조인덱스 짬뽕되어있을때
                -보조인덱스에서 위치포인터(RID)를 가리켰던 값이 클러스터인덱스의 key값이 된다
                -즉, 보조인덱스로 검색을 하게되면, 보조인덱스의 리프페이지에 클러스터인덱스의 key와 연결이 되어 해당 key를 가지고 클러스터인덱스의 리프페이지(데이터페이지)로 가서 데이터를 찾아온다
                -만약 보조인덱스의 리프페이지에 클러스터인덱스의 key를 연결시키는것이아닌, 위치포인터를 연결시켜놨으면 속도는 빠를수있으나(depth가 적어지므로), 클러스터 인덱스의 리프페이지에 페이지분할이 일어나서 위치가 바뀌면 영향가는 모든 보조인덱스의 리프페이지의 위치를 변경시켜줘야한다.. 이는 상당히 많은 비용을 초래할수있다..
                    (=> 그냥 클러스터인덱스의 KEY를 넣는게 데이터 변경에 의한 부하를 대폭 줄이는게 검색속도 좀더 개선되는것보다 나으니깐 이렇게 만들었겟지..?)
                -주의사항 
                    -어쩃든 보조인덱스의 리프페이지에 클러스터의 key가 저장되므로, key의 사이즈가 너무크면 그만큼 리프페이지에 저장되어야하는 양도 커지니 잘 고려해서 만들것!
            
            -인덱스 제거시 주의사항
                -보조 인덱스부터삭제할것!
                    -데이터 페이지의 인덱스를 먼저 삭제하게되면, 보조인덱스의 리프페이지에 다시 데이터페이지의 주소를 등록하는 작업이들게된다.. 
                -인덱스 활용도 떨어지면 바로바로지울것!
            
            -인덱스 힌트
                -이를 사용해서 인덱스를 강제하도록 지정가능
                -종류
                    -IGNORE INDEX(인덱스이름) : 인덱스 강제로 사용x
                    -USE INDEX(인덱스이름) : 인덱스 강제사용
                    ex) SELECT * FROM emp_c IGNORE INDEX(PRIMARY) WHERE emp_no < 50000
                        -> 강제로 PRIMARY KEY(클러스터 인덱스) 사용못하게한것


            -기타
                -데이터 종류가 적은(카디널리티가 낮거나, 선택도가 나쁜데이터)는 인덱스로 놉
                -가끔 인덱스가 있음에도 full scan이 된다면 이는, 인덱스를 태우지않는게 더 낫다고 MYSQL이 판단한것
                -보조인덱스 중에서 전체 데이터의 대략 15%이상을 스캔하는 경우에는 MySQL이 인덱스를 사용하지않고 테이블 풀스캔한다.. 물론, 개략적인 추정치이며 훨씬 적은 데이터를 검색해도 테이블 스캔 할수도 있다..
                    -너무 많은 범위가 나타나면 인덱스를 사용하면서 페이지 왔다갔다리 하는거보다 풀스캔 하는게 더 나을수도 있기에 mysql이 그렇게 판단하는듯함
                    -즉, 주로 15%이상의 범위를 검색하는 경우에는 인덱스를 만들지 않는게 시스템성능에 도움이 될수있음..
                -인덱스가 생성된 WHERE 에 나오는 열 이름에는 아무런 함수나 연산을 가하지 않아야 MySQL이 연산을 사용한다!!!!!!
                -외래키 지정하면 자동으로 외래키 인덱스 생성
                -join 자주사용되는 열에는 인덱스 생성할것!
                -클러스터형 인덱스에는 범위(BETWEEN, <, > 등의 조건)나 집계함수를 사용함에 있어서는 매우 효과적!(당연히 정렬되어있으니깐! 범위 가져오기 싹좋음)
                -INSERT UPDATE DELETE가 자주일어나는지를 알아야함!! 그래야 고민해서 인덱스를 어느정도 넣을지 알수있음!
                -클러스터형 인덱스가 꼭 필요한것은 아니다!!
                    -사용자 ID같은 경우 클러스터인덱스를 걸어놓으면 갑자기 사용자가이벤트로 인해 많이 가입하게되면 시스템에 엄청난 부하가 갈수있음.. 이는 그냥 UNIQUE인덱스로 변경하고 어플리케이션상에서 막아주는게 좋은방법!(UNIQUE인덱스에 NOT NULL하면 클러스터 인덱스되니깐 그렇게하지말고..)
                -사용하지않는 인덱스 꼭 제거!!
                -OPTIMIZE TABLE구문이나 ANALYZE TABLE 구문 자주사용하여 인덱스를 재구성해서 조각화를 최소화해야 시스템의 성능을 최상으로 유지시킬수있따함 - ???????


스토어드 프로그램
    -스토어드 프로시저
        -MYSQL에서 제공되는 "프로그래밍" 기능!
        -여러 쿼리문들을 넣을수있기에 일괄처리에 유용!
        -실제 테이블이 없어도 만들어는짐.. 나중에 call하면 에러나겟지
        -테이블 이름을 파라미터로 넘겨줘서 실행하려면 동적쿼리로 가능하다!
            -동적쿼리에서도 물음표를 사용하여 using쓰면 안됨.. (아마 물음표는 '' 이 홑따옴표도 포함되서 그러는듯..?)
            -걍 concat을 써야함..
        -ALTER PROCEDURE 로 프로시저 내용 못바꿈.. 무조건 삭제하고 다시 만들어야함!!

        -특징
            -mysql 성능향상
                -네트워크에 부하가 적음,, 쿼리문을 다 보내지않기떄문에!
                *다른 DBMS는 프로시저가 처음 호출시에 1회만 컴파일된후 메모리에 로딩이 되고, 그 이후에 호출할때는 컴파일하지않기때문에 성능효과가 상당하다. 그러나 mysql은 호출할때마다 컴파일..
            -유지관리 간편
                -사용자입장에서는 필요한 기능의 프로시저이름만 호출하면됨! 내용고쳐야한다면 프로시저만 고치면끝
            -보안강화
                -DB 테이블에 직접 접근하지않고 프로시저를 통해서만 접근하도록 제어할수있음(이런부분은 뷰와 비슷?)
        
        -형식
            DELIMETER $$
            CREATE PROCEDURE 프로시저이름 (
                IN 또는 OUT 파라미터
            )
            BEGIN
                쿼리문
            END $$
            DELIMITER ;

            *IN 파라미터 : 전달받는 데이터 변수
            *OUT 파라미터 : 전달해줄 데이터 변수
                            ex) call outProc(@abc); -- 해당 프로시저는 @abc에 필요한결과 값을 넣어줌
                                select @abc;
    
    -스토어드 함수
        -사용자 정의함수로 보면됨
        -프로시저와의 차이점
            -IN,OUT 사용x
            -RETURNS문으로 반환할 값의 데이터 형식을 지정, RETURN문으로 하나의 값을 반환필요
            -CALL이 아닌, SELECT 문장 안에서 호출
            -SELECT .. INTO .. 이렇게 데이터를 넣어주는것만 가능,, SELECT문 불가!
            -하나의 값을 반환하는데 사용! 프로시저와 용도가 확실히 다르다!
        -스토어드 함수도 수정 불가! 삭제하고 다시만들어야함
    -커서
        -쿼리의 결과로 가져온 여러개의 행을 한 행씩 처리하기 위한 방식
        -처리순서
            1) 커서선언 ex) DECLARE 커서이름 CURSOR FOR SELECT 열 FROM 테이블명
            2) 반복조건선언 : 더 이상 읽을 행이 없을 경우에 실행할 내용 설정 ex) DECLARE CONTINUE HANDLER FOR NOT FOUND SET endOfRow = TRUE; -- CONTINUE여야지 해당 error 잡고 계속 실행시킴  
            3) 커서열기(OPEN)
            4) 커서에서 데이터 가져오기(FETCH) 
            5) 데이터처리
            6) 커서닫기(CLOSE)

            * 4번과 5번에서 LOOP ~ END LOOP 문으로 반복 구간 지정
        
    -트리거
        -무결성을 위한것!
        -테이블에 부착되어서 insert update delete 등의 쿼리를 실행시 자동으로 실행되는것!
            즉, 해당 테이블에 특정 이벤트 발생할때만 동작!
        -특정 이벤트에 여러개의 트리거가 붙어있을때 순서도 정할수있음
        -만약 트리거가 중첩되어서 실행중일때 하나라도 에러나면 모두 롤백..
            *트리거가 중첩되었다는것은, 하나의 이벤트 발생시 영향가는 테이블에 모두 트리거가 연결되어있어서 여러 트리거가 실행되는것  ex) A B C 테이블이 있을때, A table에 insert하면 B table에 update 트리거, B에 Update하면 C에 insert하는 트리거가 있을경우..
        -트리거 수정불가! 삭제하고 다시만들어야함
        -트리거를 만들때 OLD와 NEW라는 임시테이블을 사용하여 insert update delete시 바뀔데이터 혹은 이전데이터를 사용할수잇음
            -INSERT : NEW (새로 insert 할 데이터)
            -UPDATE : NEW, OLD (새로 update 할 데이터, update하기 이전 데이터)
            -DELETE : OLD (기존 삭제할 데이터)

전체텍스트검색과 파티션
    -전체텍스트 검색
        -긴 문자로 구성된 구조화 되지않은 텍스트데이터 등을 빠르게 검색하기 위한 부가적인 MySQL의 기능
        -텍스트의 키워드 기반으로 빠르게 검색가능
        -기존 인덱스만드는거에 FULLTEXT INDEX로 만들면댐
            -여러개열 지정가능
            -char, varchar, text 열에서만 생성가능
            -힌트 사용제한
            -조건문에 MATCH(인덱스로 지정한 열) AGAINST('검색할 내용' [IN NATURAL LANGUAGE MODE | IN BOOLEAN MODE ..])
                -IN NATURAL LANGUAGE MODE : 기본값.. 딱 정확히 해당 내용 포함되어야함  ex) ~ AGAINST('사랑') 이면, 내용에 "사랑은" 이라고 써있는거 못찾음
                -IN BOOLEAN MODE : 단어나 문장이 정확히 일치하지 않는것도 검색.. 필수로 필요한것은 단어 앞에 '+', 제외는 단어앞에 '-', 부분검색은 '*'를 추가해주면됨 ex) ~ AGAINST('영화 배우 +공포' IN BOOLEAN MODE) 이면, '영화 배우' 라는 단어가 들어가있는 것중에 공포가 반드시 있는것만 나옴
    
    -파티션
        -하나의 테이블에 엄청 많은 데이터가 들어가있으면, 당연히 DML에 무리가 갈수밖에없다. 이를 위해서 테이블의 데이터를 물리적으로 특정 조건에 따라 잘 쪼개놓으면 DML의 접근시 성능상에 상당히 이점이있는데, 이를 위해서 물리적으로 쪼개는 것을 파티션이라고 한다 
        -mysql 8.0은 최대 8192 파티션을 지원한다함,, 
        -파티션을 진행하기위해서는 특정 컬럼의 조건으로 가능한데, 해당 컬럼이 PK에 속해있거나, PK가 없어야 파티션이 생성된다
        -파티션 테이블에 외래키 설정x
        -프로시저, 스토어드함수, 사용자 변수등을 파티션 함수나 식에 사용x
        -임시테이블은 파티션 기능x
        -파티션 키에는 일부 함수만 사용가능
        -range 파티션은 숫자형의 연속된 범위를사용(특정 날짜별로 파티션하기좋음), 리스트파티션은 숫자형 또는 문자형의 연속되지않은 하나하나씩 파티션 키 값을 지정
        -리스트 파티션에는 그렇기때문에 MAXVALUE 사용 x, 모든 경우의 파티션 키 값을 지정해야함

유용한 쿼리문

*SHOW KEYS FROM 테이블이름;
    -FK, PK 등 모든 key에 대해서 나옴

*DROP TABLE 테이블1, 테이블2, 테이블3 ...
*CHECK TABLE 테이블이름/뷰이름
    -테이블 상태체크
    -뷰가 만약 참조하고있는 테이블이 없어졌을때 혹은 컬럼이 없어졌을때 등 해당 쿼리문을 통해 알수있음

*SHOW VARIABLES LIKE 'innodb_page_size'
    -페이지 크기 확인가능

*SHOW TABLE STATUS LIKE '테이블명'
    => 이를 통해서 인덱스의 크기나, 데이터의 크기등을 알수있음(보조 인덱스의 크기가 Index_length.. 만약 클러스터인덱스면 Index_length는 0,,)

*SHOW INDEX FROM 테이블명
    => Non_unique가 0 : 유일값,, 1 : 중복가능
    Cardinality : 높을수록 중복이 적은것! 높아야지 인덱스의 효용가치가 좋다
    Non_unique가 0이고 not null이면 클러스터인덱스(하지만 PRIMARY KEY랑 같이있으면, PRIMARY KEY가 클러스터 인덱스)

*ANALYZE TABLE 테이블명;
    => 테이블을 분석/처리 해주는것(생성한 인덱스 적용하여 확인하기위해)

*SHOW GLABAL STATUS LIKE 'Innodb_pages_read';
    => 현재 읽은 페이지수,, 이거로 페이지수 확인하고 쿼리날리고 다시 호출하면 얼마만큼 페이지를 읽엇는지 확인가능

*show full columns from 테이블명
    => 테이블의 컬럼정보 자세하게나옴

*SELECT * FROM information_schema.`COLUMNS` C
WHERE table_schema = 'jeremy_test'
  AND table_name = 'ata_mmt_tran';
    => 테이블의 컬럼정보 엄청 자세하게나옴..

*show grants for 'jeremy'@'%';
    => 특정 사용자 권한 조회

*select * from information_schema.GLOBAL_STATUS
where VARIABLE_NAME in ('Com_stmt_prepare','Com_stmt_execute','Prepared_stmt_count');
    => preparedStatement 잘 사용하고있는지 확인할수있는 쿼리
    => Com_stmt_prepare: Connection.prepareStatement("쿼리문") 호출한 횟수
    => Com_stmt_execute: executeQuery,executeUpdate 호출한 횟수
    => Prepared_stmt_count : preparedStatement 만들어진 갯수

*JDBC 옵션 셋팅관련 설명굿
-https://2ssue.github.io/programming/HikariCP-MySQL/