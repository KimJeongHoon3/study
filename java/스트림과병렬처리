스트림 & 병렬처리

-스트림의 특징
    1) 람다식으로 처리해야하는 코드를 제공(매개변수를 통해서)
    2) 내부반복자를 사용하여 병렬처리가 쉬움
        -개발자가 for문이나 iterator를 사용하여 외부 반복자를 사용할수도있지만, 스트림에서는 처리코드를 전달해주면 내부반복자를 통해서 알아서 처리코드대로 처리한다.. 스트림은 내부적으로 멀티코어 cpu를 사용하여 병렬로 처리하기도하며 요소들의 반복순서를 변경해서 실행하기도한다.. 즉, 처리코드만 주면 알아서 다한다..
            => 그런데 이게 꼭 빠르지는 않다고함.. 그냥 병렬처리가 아니라면 그냥 For문 쓰는게 처리속도면에서는 제일 좋음..
        -ForkJoinPool이라는 스레드풀로 병렬처리!    
    3) 스트림은 중간처리와 최종처리를 할수 있음
        -중간처리 : 매핑, 필터링, 정렬
        -최종처리 : 반복, 카운팅, 평균, 총합
-스트림 파이프라인
    -대량의 데이터를 가공해서 축소하는것을 리덕션(reduction)이라 하는데, 스트림 파이프라인을 통해서 가능함
    -중간처리(매핑, 필터링, 정렬, 그룹핑 등)를 통해서 최종처리(합계,평균,최대,최소 등)를 하기위해 여러개의 스트림이 연결되어있는것을 파이프라인이라 한다
    -최종처리를 하기위한 모든 스트림은 중간처리임!

-필터링
    -distinct : 중복값 제거
    -filter : 조건 필터링.. Predicate true를 리턴하는 요소만 필터링

-매핑 : 스트림의 요소를 다른 요소로 대체하는 작업..
    -flatXXX() : 요소를 대체하는 복수개의 요소들로 구성된 새로운 스트림을 리턴. 예를들면 String을 split으로 쪼개어 int배열스트림으로 리턴해주는것
    -mapXXX() : 요소를 대체하는 새로운 요소
    -asDoubleStream()
    -asLongStream()
    -boxed() : IntStream -> Stream<Integer> 로 변경시켜줌.. 자유롭게 sort써야될때 이거괜춘한듯.. IntStream은 오름차순밖에안되니께..?

-sort :정렬
    -Stream<T> 정렬일때 
        -sorted() : T에 comparables를 구현해놔야..
        -sorted((a,b)->a.compareTo(b)) : 람다로 구현
        -sorted(Comparator.naturalOrder()/*Comparator.reverseOrder()*/) : 사용하기 용이하게 알아서 구현해준것..
    -DoubleStream, IntStream, LongStream : sorted()밖에 없음..오름차순으로 정렬

-루핑
    -peek : 중간처리메소드이기에 최종처리가 반드시 있어야 작동
        -중간처리과정중 looping하면서 추가적인 작업을 하기위해 사용됨!!
    -forEach : 최종처리메소드이기에 이후에 또 최종처리 메소드 사용 x(마지막호출이어야함)

-매칭
    -allMatch : 모든 요소들이 매개값으로 주어진 Predicate의 조건을 만족하는지
    -anyMatch : 최소한 한개의 요소가 매개값으로 주어진 Predicate의 조건을 만족하는지
    -noneMatch : 모든 요소들이 매개값으로 주어진 Predicate의 조건을 만족하지않는지

집계 : 대량의 데이터를 가공해서 축소하는 reduction이라 볼수 있음
    -sum,count,average,max,min
    -커스텀집계 : reduce 사용

collect : 최종처리 메소드..! 집계하여 컬렉션으로 담을수있고, 요소들을 그룹핑한후(stream 다시사용..?) 집계할수있음
    -사용방법이 매우다양함! 테스트 소스한 내용참고


병렬처리 :
    -데이터 병렬성 : 전체 데이터를 쪼개어 서브 데이터들로 만들고 이 서브 데이터들을 병렬처리해서 작업을 빨리 끝내는 것(병렬스트림은 이것을 구현한것),, cpu 갯수에 맞춰서!
    -작업 병렬성 : 서로 다른 작업을 병렬 처리하는 것 ex) 웹서버! 웹 서버는 각각의 브라우저에서 요청한 내용을 개별 스레드에서 병렬처리!
    -포크조인(ForkJoin) 프레임워크 사용
        -포크단계에서 전체 데이터를 서브 데이터로 분리하고 병렬처리를 진행
        -조인단계를 통해서 결합과정을 거쳐 최종 결과를 산출
        -즉, 쪼갯다가 다시 병럴로 작업하고 다시 합치는것!
    -병렬처리를 선택하기 전에 고려해야할 사항
        -요소의 수와 요소당 처리시간 : 요소의 수가 적고 요소당 처리시간이 짧으면 순차처리가 더 효과적.. 스레드풀생성 스레드생성 등의 추가적인 비용이 병렬처리에서는 들기때문!
        -스트림 소스의 종류 : arrayList가 빠름.. set이나 linkedlist는 요소분리하는데 index로 처리하지않아서 상대적으로 많은 비용이든다
        -코어의 수 : 많으면 병렬처리 속도 당연빠름..
        