Netty 정리
-비동기 이벤트기반 네트워크 애플리케이션 프레임워크로써 유지보수를 고려한 고성능 프로토콜서버와 클라이언트를 빠르게 개발하도록 도와준다.
    *동기와 비동기
    -동기 : 서비스 호출하면 서비스의 작업이 끝날때까지 기다렸다가(호출이 종료되면) 처리 결과를 확인.. 서비스 처리가 완료된 이후에 처리 결과를 알수 있는 방식을 동기식 호출
    -비동기 : 서비스를 호출하면 해당 서비스에대한 처리를 전문으로하는 스레드에게 함수를 등록하고 이에 해당하는 티켓을 받는다.(서비스가 완전 끝나기전에) 그리고 해당 티켓으로 결과값을 요청하면 받께된다..
        => 비동기 호출을 지원하는 다양한 디자인 패턴들이 있음 : 티켓같은 개념의 퓨처 패턴, 이벤트 리스너는 옵저버 패턴, Node.js는 콜백함수, 네티는 리액터 패턴..
    *블로킹과 논블로킹 (소켓 동작 방식은 블로킹과 논블로킹으로 나뉜다.)
    -블로킹 : 요청한 작업이 성공하거나 에러나기전까지 응답을 돌려주지않는것..
    -논블로킹 : 요청한 작업의 성공 여부와 상관없이 바로 결과를 돌려주는것..
    *이벤트기반 프로그래밍
    -추상화수준.. : 동일한 동작에 대한 정의.. 적절한 추상화수준이 필요함..! ex) 마우스 이벤트 발생이라하면, 오른쪽버튼 클릭, 왼쪽버튼 클릭 (고수준 추상화) // 버튼 누르는 이벤트, 버튼 눌렀다가 떼는 이벤트, 한번클릭, 두번클릭 (저수준 추상화)
    -소켓 통신에 관해 추상화를 해보자면,
        서버: 서버소켓생성 / 포트바인딩 / 연결대기 / 연결수락 / 소켓생성 / 데이터수신 / 데이터전송 / 소켓닫기
        클라: 소켓생성 / 연결요청 / 데이터전송 / 데이터수신 / 소켓닫기
-소켓으로 데이터를 송수신 하기위해 직접 채널에 데이터를 쓰고 읽는것이아닌, 핸들러를 통해서 채널에 접근하는것이 이벤트기반의 netty!!    

-부트스트랩
    -역할 : 네티로 작성한 네트워크 애플리케이션의 동작방식과 환경을 설정하는 도우미 클래스
    -설정 : 크게 이벤트 루프, 채널의 전송모드(블로킹,논블로킹,epoll) ,채널 파이프라인(핸들러!)으로 나뉨
    *이벤트 루프 : 소켓채널에서 발생하는 이벤트를 처리하는 스레드 모델에 대한 구현이 담겨있음..
    

    -ServerBootStrap(abstractBootStrap 상속)
        -group에는 하나의 인수와 두개의 인수를 전달할수있다. ThreadGroup을 설정하는것인데, 인수가 하나로 가게되면, EventLoopGroup을 하나로 공유하는것(첫번째인수, 두번째인수에 모두 같은 eventgroup을 넣는..)이다.. 
        즉, 결국 두개의 인수를 모두 사용하는 포맷이란것.. 첫번째인수는 서버에 들어오는 클라이언트의 연결을 수락하는(accept하는놈) 부모스레드 그룹이며, 두번째 인수는 연결된 클라이언트들의 입출력 및 이벤트 처리를 담당하는 자식스레드 그룹이다..
        (reactor 패턴을 이용했다함.. - http://i5on9i.blogspot.com/2013/11/reactor-pattern.html)

        *bootStrap은 데이터 처리하는 스레드만 있으면되기때문에, group에 하나의 이벤트루프만 전달받는다!(serverSocketChannel, socketChannel을 둘다가지고 있기때문에 ServerBootStrap은 두개! socketChannel만 가지고있기때문에 bootstrap은 한개!)
            -nioEventLoopGroup에 전달해주는 스레드갯수는 eventLoop의 갯수를 의미..??????

        -ServerBootStrap의 handler는 ServerSocketChannel의 이벤트 핸들러를 정의하고(로그 남기는 핸들러와같은..), childHandler는 socketChannel에 대한 이벤트 핸들러(데이터 송수신 이벤트~)를 정의한다!

    -BootStrap(abstractBootStrap 상속)
        -ServerBootStrap에서 child가 빠지게되는데, BootStrap은 하나의 채널만 사용하기때문!! 즉 서버와 연결된 클라이언트의 소켓채널!

//.option(ChannelOption.TCP_NODELAY,true) => nagle 알고리즘을 사용안하겠다는뜻! 
    *네이글 알고리즘 특징 : 
        1)작은 크기의 데이터를 전송하면 커널의 송신 버퍼에서 적당한 크기로 모아서 보낸다.. (프로그램상에서 send를 하면 커널에 전달하여 최종적으로 인터넷을 통해 보내게됨.. 반대는 커널부터받고 프로그램에 receive되는것!)
        2)보낸패킷의 ack를 받아야 다음 데이터를 전달함.. 그렇기에 약간 지연이 발생!

*NIO 논블록킹 소켓통신 흐름(reactor 패턴..)
1)selector에 channel(ServerSocketChannel, SocketChannel) 을 등록해준다.

2)등록할때 channel이 어떤상태의 key 인지도 같이 등록한다..(SelectionKey.OP_ACCEPT, SelectionKey.OP_READ, SelectionKey.OP_WRITE..) 
3)selector가 특정변화가있을때를 감지하여 변화가 일어난 key를 가져오면(key에는 모든 정보가 들어있다... ) key를 통해 "2)"에 수행한 상태(?) 혹은 역할(?) 을 지정한대로 작업을 수행한다.. socket을 accept하거나 socket에 데이터를 읽거나 쓰거나 등등.
4)처리가 끝나면 selector는 다시 이벤트를 기다린다.. 반복..

**기본적으로 channel은 블록킹 모드이므로 configureBlocking을 false로 설정해야 비동기가가능..
***key에는 attach를 통해서 객체를 담아놓을수 있음.. attachment로 꺼내올수있음
****wakeup을 통해 selector가 대기하고잇는것을 깨울수있음..

=>selector와 같은 event발생을 체크하는 reactor가 있고, 이벤트에 맞는 처리를 해주기위한(오직 그것만 담당하는) handler로 나뉘어 동작하는 패턴이 reactor 패턴이다..


-채널파이프라인과 코덱
    -채널파이프라인 : 채널에서 발생한 이벤트가 이동하는 통로
    -이벤트 핸들러 : 통로를 통해서 이동하는 이벤트를 처리하는 클래스
        -채널 인바운드 이벤트 : 소켓채널에서 발생한 이벤트 중에서 연결 상대방이 어떤 동작을 취했을때 발생.. 예를들면 메세지 수신, 채널 활성화 등
            -channelRegistered : 채널이 이벤트 루프에 등록되었을때 발생.. 
                -클라이언트에서는 서버 접속을 위한 connect를 실행하여 이벤트루프에 등록할때 channelRegistered가 호출되며, 서버에서는 accept하여 소켓채널이 생성되어 이벤트루프에 등록한뒤 호출.. 소켓채널생성하고 이벤트루프에 등록될때 호출된다는것이 동일
                *이벤트루프 : netty가 event를 실행하는 전용 스레드
            -channelActive : 네티 API를 사용하여 채널 입출력을 수행할 상태가 되었다는것.. 연결하여 처음 뭔가 작업해야할게 있을때 여기서 로직을 만드는게 좋음
            -channelRead
            -channelReadCompelete : channelRead에서 데이터를 더이상 읽을게 없으면 이게 수행.. 만약 channelRead가 수행되고 여전히 읽을데이터가남아잇으면 다시 channelRead가 수행되지 ChannelReadComplet이 수행되지않는다
            -channelInactive : 이 이벤트가 발생한 이후에는 더이상 채널에 대한 입출력불가,, 이 메서드가 호출되었을때는 채널이 비활성화되어있음
            -channelUnregistered : 채널이 이벤트 루프에서 제거된상태.. 수신한 이후 채널에서 발생한 이벤트 처리불가..

        -채널 아웃바운드 이벤트 : 소켓 채널에서 발생한 이벤트 중에서 네티사용자가 요청한 동작에 해당하는 이벤트.. 연결요청, 데이터전송, 소켓닫기 등이 이에해당..

        *ChannelHandlerConetxt
            1) 채널에 대한 입출력처리
            2) 채널파이프라인에 대한 상호작용
                -ctx는 파이프라인을 가져올수있기때문에 수정가능하고,
                -사용자에 의해 이벤트 발생가능.. fireExceptionCaught 보내면 exceptionCaught 이벤트 발생!

    -코덱 : 이벤트 핸들러를 상속받아서 구현한 구현체
        -MessageToMessageEncoder는 channelOutboundHandler를 상속받고있는데, MessageToMessageEncoder가 write 메소드를 오버라이딩하여 MessageToMessageEncoder의 추상메소드인 encode를 수행한다..(MessageToMessageEncoder는 추상클래스..)
        -위의 MessageToMessageEncoder를 구현한 클래스를 채널파이프라인에 add하게되면 흐름은 아래와같다
            1)ctx.write()
            2)채널 파이프라인에서 이벤트 감지
            3)channelOutboundHandler에서 write 이벤트
            4)MessageToMessageEncoder의 encode를 override한 메소드 실행
            => MessageToMessageEncoder를 구현한 클래스(ex. MessageToByteEncoder)는 기본적으로 ChannelOutboundHandlerAdapter를 상속받고 있기때문에 encoder를 핸들러에 추가한것은 결국 아웃바운드 핸들러를 추가한것과 같다.. 
            그래서 실행해보면 쌩으로 outBoundHandler도 핸들러에 들어있다면 호출x.. 해당 이벤트를 encoder가 다 처리해버리기때문!!

    -동작순서 :
        1) 네티의 이벤트 루프가 파이프라인에 등록된 첫번째 이벤트 핸들러를 가져온다.
        2) 데이터 핸들러에 데이터 수신 이벤트가 구현되어있으면 실행
        3) 데이터 수신 이벤트 없으면 다음 이벤트 핸들러를 가져옴
        4) 2번으로 다시 돌아감
        5) 파이프라인에 등록된 마지막 이벤트핸들러에 도달할때까지 1번부터 반복..

    ******중요*****
    -이벤트 핸들러를 등록하는 순서가 매우 중요하다.. 코덱을 먼저 addLast 해주어야 코덱을 읽어나간다.. 메세지에 대한 처리를 하는 핸들러가 코덱핸들러보다 앞서있으면 정상적으로 처리되지않는다..!

    참고..
        ChannelPipeline p = pipeline();
        p.addLast("1", new InboundHandlerA());
        p.addLast("2", new InboundHandlerB());
        p.addLast("3", new OutboundHandlerA());
        p.addLast("4", new OutboundHandlerB());
        p.addLast("5", new InboundOutboundHandlerX());
        In the given example configuration, the handler evaluation order is 1, 2, 3, 4, 5 when an event goes inbound. When an event goes outbound, the order is 5, 4, 3, 2, 1. On top of this principle, ChannelPipeline skips the evaluation of certain handlers to shorten the stack depth

        https://netty.io/4.0/api/io/netty/channel/ChannelPipeline.html

        => 데이터 들어오면 1,2,5 이렇게 들어왔다가 나갈때는 5,4,3 이렇게 작동된다.. 만약 인바운드 아웃바운드 모두 가능한 5가 없고, 데이터가 2까지 들어온뒤 2에서 write를 한다면 3,4는 작동하지않음..


    -채널을 통해 이벤트가 들어오게되면, 채널 파이프라인으로 이벤트들을 전달한다.. 채널파이프라인에는 여러 이벤트 핸들러가 붙어있을수있는데, 이벤트핸들러에 구현된 코드에따라 작업이 수행되고, 채널파이프라인을 통해서 다음 처리할 이벤트핸들러가있으면 계속 전달하게된다.
    -채널 파이프라인의 초기화 순서 : 
        1)클라이언트가 들어오게되면, 서버소켓채널이 소켓채널을 만든다 
        2)소켓채널을 만들때 빈 채널파이프라인 객체를 소켓채널에 할당한다..
        3)소켓채널에 등록된 ChannelInitializer 인터페이스의 구현체를 가져와서 initChannel메서드를 호출한다..(핸들러 add)
        4)채널파이프라인을 호출하여 이벤트핸들러를 추가한다.

    -동일한 인바운드 핸들러가 두개 붙어잇을때에 이벤트가 발생하여 이벤트 메소드를 호출하게되면, 다른 핸들러에서 동일한 이벤트 메소드가 호출되지않는다.. 네티는 이벤트 메소드가 한번 호출되면 특별히 다음 핸들러에 이벤트를 발생시키라는 fireXXX를 실행하지않는 이상 딱 한번만 실행된다..
     

-이벤트 모델
    -이벤트루프 : 이벤트 큐에 이벤트를 쌓아서 이벤트 루프스레드(계속돔..)가 큐에서 하나씩 이벤트를 빼와 이벤트를 수행하는것이다.
        -단일스레드 이벤트 루프 : 하나의 스레드로 이벤트들을 하나씩 처리.. 이벤트 하나에 1초가 걸린다면 3개의 이벤트는 3초걸림..
        -다중스레드 이벤트 루프 : 여러 스레드로 이벤트 큐에 접근하여 처리.. 이벤트 하나에 1초가 걸린다면 3개의 이벤트 또한 1초.. 그러나 주의해야할점이있음.. 순서보장안한다.. 그리고 너무 많은 스레드는 성능저하를 가져옴.. 왜냐하면 스레드경합과 컨텍스트 스위칭에 따른 CPU 사용량이증가하기때문..
            *스레드 경합 : 스레드들이 하나의 자원을 공유할때 각 스레드는 공유 자원의 엑세스 권한을 획득하려고 스레드 경합이 일어남..
            *컨텍스트 스위칭 비용 : 하나의 CPU에는 하나의 스레드만 운용할수있는데, CPU가 가진 스레드보다 더 많은 스레드가 대기하다가 실행상태로 바뀔때 스레드가 가진 스택 정보를 현재 코어의 레지스터로 복사하는 작업이 이루어지는데, 이를 컨텍스트 스위칭이라함..
        
        JMeter.. 사용해서 적정 스레드 체크해볼것!

    -Netty이벤트는  다중스레드 이벤트 루프를 사용하지만 순서보장이된다! 왜냐하면 하나의 이벤트 루프스레드 안에 이벤트 큐가 들어가있고, 해당 이벤트 루프스레드에 채널이 여러개 붙게된다.. 즉, 하나의 채널은 무조건 하나의 이벤트 루프 스레드안에 있는 하나의 큐를 사용하게된다..
    ***netty의 channel 클래스안에 이벤트루프가잇음! 즉 채널에 이벤트루프를 등록한게맞음..

-바이트버퍼
    -JAVA NIO의 ByteBuf 
        -힙버퍼 : allocate(int capacity)로 가져옴,, JVM의 heap 영역에 바이트 버퍼를 생성 
        -다이렉트버퍼 : allocateDirect(int capacity)로 가져옴,,운영체제의 커널 영역에 바이트 버퍼를 생성.. 만드는데 힙버퍼보다 오래걸리지만 확실히 빠름
        -flip() : ByteBuf에 데이터를 쓰고난뒤(put) filp()을 실행하면 position은 0이 되고 limit은 최종적으로 데이터를 기록한 위치가 된다.. 즉, 읽기에 최적화된 상태로 변환된다..
                반대로 데이터를 읽고 난뒤(get) flip()을 실행하면 postition은 0이 되고 limit은 최종적으로 데이터를 읽은 위치가 된다.. 즉, 다시 데이터를 쓰기에 적절한 상태로 변환된다..
                *position은 언제나 Limit or capacitry보다 작거나 같다!!
    -Netty의 ByteBuf
        -별도의 읽기, 쓰기 인덱스 존재 => flip안써도댐!
        -가변 바이트 버퍼 : 크기를 자유롭게 조절할수있다.. 꼭 처음에 지정해야하는것아님! 기존보다 줄이면, 줄인만큼 뒤의 데이터는 잘려나간다..
        -바이트 버퍼 풀 : 생성된 바이트 버퍼를 풀에 저장하여 재사용할수도 있음!,,
            -가비지컬렉터는 할당되지않는 객체를 알아서 힙 메모리에서 지워주는 역할을 하는데, JVM에 할당된 메모리의 크기가 증가될수록 그리고 할당되지않는 객체들이 많이 생성될수록 가비지컬렉터의 수행 시간이 오래걸린다. 그렇기에 풀로 관리를해서 객체를 재사용하여 가비지컬렉터의 부담을 줄여주는것!! + 오버헤드 줄여줌!
            -네티는 바이트 버퍼를 풀링하기 위해서 바이트 버퍼에 참조 수를 기록한다.. 참조수 관리하기위해서 ReferenceCountUtil를 사용하고, retain함수는 은 참조수를 증가시키고 release 함수는 참조수를 감소시킨다.
                -참조수가 0이되면 객체 더이상 사용불가
            -ctx에서 alloc을 실행하면 ByteBufAllocator를 가져온다.. ByteBufAllocator는 서버소켓채널이 초기화될때 같이 초기화되며 channelRead에서 인수로 넘어오는 ByteBuf는 다 풀에서 가져오는것이다.. 또한 ByteBuf를 write하게되면 해당 버퍼를 채널에 기록하고 다시 풀로 돌아간다..(아마 풀링한 바이트 버프일것이라는 전제..?)     
        -복합 버퍼
            -엔디안변환도 가능.. 기본값은 빅엔디안인데 리틀엔디안으로 변환도가능.. 변환시 데이터 유지
            *엔디안 참고 : https://genesis8.tistory.com/37
        -자바의 바이트 버퍼와 네티의 바이트 버퍼 상호변환가능
        
        -생성방법
                                        풀링함                                  풀링안함
            힙버퍼       ByteBufAllocator.DEFAULT.heapBuffer()            Unpooled.buffer()
            다이렉트버퍼   ByteBufAllocator.DEFAULT.directBuffer()          Unpooled.directBuffer()

-기타
    -@sharable : 네티가 제공하는 공유가능 상태표시 어노테이션. 채널파이프라인에서 공유할수있는놈입니다~ 라는 뜻,, 다중스레드에서 스레드 경합이 일어나지않는다함..


* 주의할 점
위의 이벤트 루프 모델을 잘 살펴보면 Netty를 이용하여 개발 할 때 주의해야할 점이 한 가지 있습니다. 바로 이벤트 루프 스레드가 blocking되면 안되는 것인데요. 이벤트 루프 스레드가 blocking되어 버리면 해당 이벤트 루프에 등록된 Channel들에서 발생한 이벤트들이 제때 처리되지못하고 요청들이 밀려버리는 상황이 발생합니다. Netty는 이벤트들을 처리하기 위해 ChannelPipeline에 여러 ChannelHandler를 등록하고 이 ChannelHandler들을 chaining하여 이벤트들이 처리됩니다. 자세한 내용은 밑의 글을 읽어 보시기바랍니다.
2020/05/17 - [Framework/Netty] - Netty의 기본 Component 및 Architecture
 
여러 ChannelHandler중 특정 ChannelHandler는 이벤트를 처리할 때 외부 서비스들과 네트워크 통신이 일어날수도 있고 DB에 write하는 작업이 있을수도 있습니다. 비즈니스 로직을 구현하다 보면 흔하게 발생할 수 있는 상황인데 Netty에서는 이런 blocking작업을 어떻게 처리해야할까요? Netty는 이벤트 루프가 blocking되지 않게 blocking구간이 있는 ChannelHandler를 다음과 같이 별도의 EventExecutor에서 실행될 수 있도록 지원합니다.
https://effectivesquid.tistory.com/entry/Netty의-스레드-모델
    -EventExecutorGroup을 pipeline에 추가해주어야한다..  DefaultEventExecutorGroup 라는 클래스를 제공해줌.. 여기서 channelHandler를 추가해주면, 이벤트루프에서 처리하는것이아닌, 별도의 스레드에서 사용한다.. 이게 db작업이나 레거시 block작업 처리를 가능하게해줌!
    -ex) channel.pipeline().addAfter(new DefaultEventExecutorGroup(1), "first", "second", 핸들러);
            /**
            * Inserts a {@link ChannelHandler} after an existing handler of this
            * pipeline.
            *
            * @param group     the {@link EventExecutorGroup} which will be used to execute the {@link ChannelHandler}
            *                  methods
            * @param baseName  the name of the existing handler
            * @param name      the name of the handler to insert after
            * @param handler   the handler to insert after
            *
            * @throws NoSuchElementException
            *         if there's no such entry with the specified {@code baseName}
            * @throws IllegalArgumentException
            *         if there's an entry with the same name already in the pipeline
            * @throws NullPointerException
            *         if the specified baseName or handler is {@code null}
            */
            ChannelPipeline addAfter(EventExecutorGroup group, String baseName, String name, ChannelHandler handler);

주기적이거나 주기적이지않은 작업(ex. heartbeat)는 어떻게?
-channel의 evnetloop를 이용하는것이 성능상의 이익을 볼수있음..
-channel.eventLoop().schedule~
슬라이드로 정리된것(사진으로 잘 정리되어있음) : https://www.slideshare.net/JangHoon1/netty-92835335



Http로는 어떻게 동작..?
    -timeout 어떻게 확인?
        => userEventTriggered에서 일정시간동안 read (또는 write시) 없을때 event호출하는 방식으로 진행!(핸들러에서 IdleStateHandler 추가해줌)
        => webclient에서는 만들때 ReadTimeoutHandler(또는 WriteTimeoutHandler)를 넘겨주어서 해결(webClient는 netty를 사용하여 http통신함)
소켓통신시 메세지 전송후 응답받았는지 체크하는 방법?
    -스케줄러를 실행시키고 future를 받아서 일정시간내에 응답받으면 future를 close한다..(!!!!!!!!!!!!!!!!스케줄러 많이 생성해도 문제없는지 확인이필요하다..!!!!!!!!!!!!!)
        ScheduledFuture<?> futrue=ch.eventLoop().schedule(Runnable, 60, TimeUnit.Seconds))  
    -CountDownLatch라는 concurrent 패키지의 클래스를 사용하여 처리하는게 좋음..


******** channelReadComplete는 언제실행되나??? ********
하나의 데이터를 받고 완전히 끝나는 함수는 channelReadComplete 임..
데이터를 받으면 channelRead로 읽게되는데, channelRead함수에서 write하면 outboundHandler(Encode도 outboundHandler쪽임..)의 write 함수를 호출함.. (flush까지 했으면 outboundhandler의 flush도 호출함..) 그렇게 데이터받은것들에대해 할거 다 처리했으면 channelREadComplete로 끝남!
*************************************************


ChannelOption - 서버 소켓 채널의 소켓 옵션 설정
    -기본적으로 자바에서 설정할 수 있는 모든 소켓 옵션 설정 가능
    -TCP_NODELAY: Nagle 알고리즘 비활성화 여부 설정
    -SO_KEEPALIVE: 정해진 시간마다 keepalive packet 전송
    -SO_SNDBUF: 커널 송신 버퍼 크기
    -SO_RCVBUF: 커널 수신 버퍼 크기
    -SO_REUSEADDR: TIME_WAIT 상태의 포트에도 bind 가능해짐
    -SO_LINGER: 소켓을 닫을 때 송신 버퍼에 남은 데이터 전송 대기 시간
    -SO_BACKLOG: 동시에 수용 가능한 소켓 연결 요청 수


***** OutBoundHandler 의 Read 함수는 왜 계속 호출되나.. ****
ctx.read(); // 채널로부터 데이터를 읽으라는 요청.. ChannelInboundHandler가 사용가능하도록해줌.. 다시 데이터를 읽기위해서 해당 메소드를 계속 호출.. readComplete이후에 현재 read(ctx)를 호출.. 
Channel에 데이터 읽기를 요청하는것!
*****************************************************


왜 갑작스레 session이 끊킨후 WriteAndFlush 하고나면 콜백에 성공이라고 뜰가..
	=> native socekt에 데이터 넣어주는것으로 역할끝,, 이후 실제로 잘갔는지는 신경안쓰기때문..
