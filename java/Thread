스레드..

-스레드를 많이사용하면 그만큼 스레드스택사이즈가 증가된다..(메소드영역과 힙영역은 공유.. 스택은 하나 생성할때마다 생김..) 
-스택사이즈는 os에따라 정해진다함...
-자바 실행시 jave xss config로 thread stack size 지정가능

Xml and More: JDK 8: Thread Stack Size Tuning - http://xmlandmore.blogspot.com/2014/09/jdk-8-thread-stack-size-tuning.html?m=1

How many threads can a Java VM support? - Stack Overflow - https://stackoverflow.com/questions/763579/how-many-threads-can-a-java-vm-support

-------
wait notify notifyAll
-우선 wait()메소드는 lock을 소유한 Thread가 자신의 제어권을 양보하고WAITING 또는 TIMED_WAITING상태에서 대기하기 위해서 사용된다. 반대로 notify()와 notifyAll()은 wait상태에 빠져있는 다른 Thread를 다시 RUNNABLE상태로 변경시키는 역할을 한다. 한가지 착각하기 쉽지만 반드시 유의해야 하는 점은 wait, notify, notifyAll은 Thread의 메소드가 아니라 Object의 메소드라는 점이다.

wait
-lock을 소유한 스레드가 this.wait()를 수행하는경우, 현재 진행중인 스레드가 일시정지되고 wait set(대기실)으로 위치하게된다.. 이렇게 되면 락이 해제되기를 기다리는 다른 스레드가 락을 점유하여 진행가능한 상태가 된다!
wait를 호출한 스레드는 WAITING or TIMED WAITING 상태가 됨

notify
-WAIT SET에서 대기중인 스레드를 깨우는 역할을 하는데, WAIT SET에 위치한 스레드들중 임의의 하나의 스레드만 깨운다. 즉, RUNNABLE 상태가 된다! 

notifyAll
-notify와 하는 역할은 동일하나 임의의 하나의 스레드만이 아니라, WAIT SET에 위치한 모든 스레드들을 깨운다.

https://javaplant.tistory.com/29


--------
synchronized void abc(){}

void abc(){
	//여기에 아무것도 없어야함
	synchronized(this){
	
	}
}

위의 두 문장은 같음!

클래스내에 static으로 되어있는 함수끼리는 동기화가 가능하나, 해당 클래스를 new 키워드로 생성해서 접근하면 동기화 불가능!
예를들어

class Test{
	int cnt=0;

	public static synchronized void staticTest1(){
		cnt++;
	}	
	
	public static synchronized void staticTest2(){
		cnt++;
	}
	
	public void test1(){
		cnt++;
	}

	public static void main(String[] args){
		//아래 두 문장은 상호간 동기화가능
		Test.staticTest1();
		Test.staticTest2();
		
		//아래 두문장은 위의 문장과 동기화불가능
		Test test=new Test();
		test.test1();
		
		
	}
}


투덜이의 리얼 블로그 :: Java의 동기화 Synchronized 개념 정리#1 - https://tourspace.tistory.com/54