jvm 관련 내용

나중에정리필요!!

jvm 옵션 설명 굿 : https://epthffh.tistory.com/entry/JVM-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B4%80%EB%A0%A8-%EC%84%A4%EC%A0%95
    -그림으로 잘 설명 : https://post.naver.com/viewer/postView.nhn?volumeNo=23726161&memberNo=36733075   


jvm에 대한 자세한 설명 : https://12bme.tistory.com/382
                    https://blog.naver.com/PostView.nhn?blogId=rokey_89&logNo=221658053244&redirect=Dlog&widgetTypeCall=true&directAccess=false
                    https://aljjabaegi.tistory.com/387


jvm 구성 : 클래스 로더(Class Loader)가 컴파일된 자바 바이트코드를 런타임 데이터 영역(Runtime Data Areas)에 로드하고, 실행 엔진(Execution Engine)이 자바 바이트코드를 실행한다.
    -classloader : .class 파일들을 로드하여 runtime data area에 배치해준다
        -"런타임"에 클래스를 처음으로 참조할 때 해당 클래스를 로드하고 링크하는 특징
        -각 클래스 로더는 로드된 클래스들을 보관하는 네임스페이스(namespace)를 갖는다. 클래스를 로드할 때 이미 로드된 클래스인지 확인하기 위해서 네임스페이스에 보관된 FQCN(Fully Qualified Class Name)을 기준으로 클래스를 찾는다. 비록 FQCN이 같더라도 네임스페이스가 다르면, 즉 다른 클래스 로더가 로드한 클래스이면 다른 클래스로 간주된다.
            -클래스 로더가 클래스 로드를 요청받으면, 클래스 로더 캐시, 상위 클래스 로더, 자기 자신의 순서로 해당 클래스가 있는지 확인한다. 즉, 이전에 로드된 클래스인지 클래스 로더 캐시를 확인하고, 없으면 상위 클래스 로더를 거슬러 올라가며 확인한다. 부트스트랩 클래스 로더까지 확인해도 없으면 요청받은 클래스 로더가 파일 시스템에서 해당 클래스를 찾는다.
                -부트스트랩 클래스 로더: JVM을 기동할 때 생성되며, Object 클래스들을 비롯하여 자바 API들을 로드한다. 다른 클래스 로더와 달리 자바가 아니라 네이티브 코드로 구현되어 있다.
                -익스텐션 클래스 로더(Extension Class Loader): 기본 자바 API를 제외한 확장 클래스들을 로드한다. 다양한 보안 확장 기능 등을 여기에서 로드하게 된다.
                -시스템 클래스 로더(System Class Loader): 부트스트랩 클래스 로더와 익스텐션 클래스 로더가 JVM 자체의 구성 요소들을 로드하는 것이라 한다면, 시스템 클래스 로더는 애플리케이션의 클래스들을 로드한다고 할 수 있다. 사용자가 지정한 $CLASSPATH 내의 클래스들을 로드한다.
                -사용자 정의 클래스 로더(User-Defined Class Loader): 애플리케이션 사용자가 직접 코드 상에서 생성해서 사용하는 클래스 로더이다.
        -클래스 로더 과정
            1) 로드: 클래스를 파일에서 가져와서 JVM의 메모리에 로드한다.
            2) 검증(Verifying): 읽어 들인 클래스가 자바 언어 명세(Java Language Specification) 및 JVM 명세에 명시된 대로 잘 구성되어 있는지 검사한다. 클래스 로드의 전 과정 중에서 가장 까다로운 검사를 수행하는 과정으로서 가장 복잡하고 시간이 많이 걸린다. JVM TCK의 테스트 케이스 중에서 가장 많은 부분이 잘못된 클래스를 로드하여 정상적으로 검증 오류를 발생시키는지 테스트하는 부분이다.
            3) 준비(Preparing): 클래스가 필요로 하는 메모리를 할당하고, 클래스에서 정의된 필드, 메서드, 인터페이스들을 나타내는 데이터 구조를 준비한다.
            4) 분석(Resolving): 클래스의 상수 풀 내 모든 심볼릭 레퍼런스를 다이렉트 레퍼런스로 변경한다.
            5) 초기화: 클래스 변수들을 적절한 값으로 초기화한다. 즉, static initializer들을 수행하고, static 필드들을 설정된 값으로 초기화한다.

    -runtime data area : jvm이라는 프로세스가 프로그램을 수행하기위해 OS에서 할당받은공간
        -Method area : JVM이 읽어 들인 각각의 클래스와 인터페이스에 대한 런타임 상수 풀, 필드와 메서드 정보, Static 변수, 메서드의 바이트코드 등을 보관한다. /* 클래스, 변수, method, static변수, 상수풀(문자 상수, 타입, 필드, 객체 참조가 저장) 등이 저장되는 영역(모든 Thread 공유) */
            *Runtime Constant Pool(런타임 상수 풀) : 클래스 파일 포맷에서 constant_pool 테이블에 해당하는 영역이다. Method Area 에 포함되는 영역이긴 하지만, JVM 동작에서 가장 핵심적인 역할을 수행하는 곳이기 때문에 JVM 명세에서도 따로 중요하게 기술한다. 각 클래스와 인터페이스의 상수뿐만 아니라, 메서드와 필드에 대한 모든 레퍼런스까지 담고 있는 테이블이다. 즉, 어떤 메서드나 필드를 참조할 때 JVM은 런타임 상수 풀을 통해 해당 메서드나 필드의 실제 메모리상 주소를 찾아서 참조한다.

        -Heap area : new 키워드로 생성된 객체와 배열이 배치되는 영역.. Method Area에 로드된 클래스만이 생성가능(garbage collection 이슈는 여기서 발생! 모든 Thread 공유)
            -Young Generation
                -Eden영역 : Object가 Heap에 최초로 할당되었을때 저장되는영역,, 여기서 참조가 오랜시간 있으면 Survivor 영역으로 이동되고, 그렇지않으면 여기에 계속 남아있게된다.. 그때에 Eden영역에 청소가 일어나는데, 이를 Minor GC라고함 
                -Survivor1 : Survivor1 or Survivor2 둘중 하나는 반드시 비어있어야함
                -Survivor2
            -Old Generation
                -Old : Young Generation에서 Live Object로 오래 살아남아 성숙된 Object는 Old Generation으로 이동,, Old Generation의 메모리도 충분하지않으면 해당영역에서 GC가 발생하는데 이를 가리켜 Full GC(Major GC) 라고 함
                    *성숙된 Object : 특정 횟수 이상 참조되어 기준 Age를 초과한 Object를 말함,,
            -Permanent 영역(java 1.8 이상부턴 없음)
                -Class의 Meta정보나 Method의 Meta정보, Static 변수와 상수정보들이 저장되는 공간으로 흔히 메타데이터 저장 영역이라고 함,,
                -Java 8이상부터는 Native 영역으로 이동하여 Metaspace 영역으로 변경


        -stack area : Method내에서 사용되는 값들(매개변수,지역변수,리턴값)이 저장되는 구역으로 메소드가 호출되는 LIFO로 하나씩 생성되고, 메소드 실행이 완료되면 LIFO로 하나씩 지워짐.. (Thread 별로 새로 생성)
        -native method stack : native 언어(c/c++)의 메소드 호출을 위해 할당되는 구역 (Thread 별로 새로 생성)
        -pc register : (Thread 별로 새로 생성)
            -JVM 실행시 호출할 메모리 주소를 기억해두는 곳이며, 실행 프로세서들이 작동될 때 이곳에 등록(registration)된 내용을 기초로 실행됩니다.
            -메소드 영여의 몇 바이트를 가리키고 있으며 바이트 코드가 실행되면서 한 명령이 실행된 후 다음 명령이 실행될 메모리 주소값을 가지고(fetch) 있고, 쓰레드(thread)의 실행 진행 상황을 주시하는 역할도 합니다.
            -Thread(쓰레드)가 생성될 때마다 생성되는 영역으로 Program Counter 즉, 현재 쓰레드가 실행되는 부분의 주소와 명령을 저장하고 있는 영역이다. (*CPU의 레지스터와 다름) 이것을 이용해서 쓰레드를 돌아가면서 수행할 수 있게 한다.



    -execution engine : Loading된 클래스의 Bytecode를 해석,,, runtime data area에 있는것들을 실행.
        -Execution Engine 은 Class Loader를 통해 JVM 내의 Runtime Data Areas에 배치된 바이트코드를 실행한다. Execution Engine은 자바 바이트코드를 명령어 단위로 읽어서 실행한다
        -바이트코드의 각 명령어는 1바이트짜리 OpCode와 추가 피연산자로 이루어져 있으며, 실행 엔진은 하나의 OpCode를 가져와서 피연산자와 함께 작업을 수행한 다음, 다음 OpCode를 수행하는 식으로 동작한다.
        -그런데 자바 바이트코드는 기계가 바로 수행할 수 있는 언어보다는 비교적 인간이 보기 편한 형태로 기술된 것이다. 그래서 실행 엔진은 이와 같은 바이트코드를 실제로 JVM 내부에서 기계가 실행할 수 있는 형태로 변경하며, 그 방식은 다음 두 가지가 있다.
            -Interpreter : 바이트코드 명령어를 하나씩 읽어서 해석하고 실행한다. 하나씩 해석하고 실행하기 때문에 바이트코드 하나하나의 해석은 빠른 대신 인터프리팅 결과의 실행은 느리다는 단점을 가지고 있다. 흔히 얘기하는 인터프리터 언어의 단점을 그대로 가지는 것이다. 즉, 바이트코드라는 ‘언어’는 기본적으로 인터프리터 방식으로 동작한다.
            -JIT(Just-In-Time) Compiler : 인터프리터의 단점을 보완하기 위해 도입된 것이 JIT 컴파일러이다. 인터프리터 방식으로 실행하다가 적절한 시점에 바이트코드 전체를 컴파일하여 네이티브 코드로 변경하고, 이후에는 해당 메서드를 더 이상 인터프리팅하지 않고 네이티브 코드로 직접 실행하는 방식이다. 네이티브 코드를 실행하는 것이 하나씩 인터프리팅하는 것보다 빠르고, 네이티브 코드는 캐시에 보관하기 때문에 한 번 컴파일된 코드는 계속 빠르게 수행되게 된다.
        -JIT 컴파일러 가 컴파일하는 과정은 바이트코드를 하나씩 인터프리팅하는 것보다 훨씬 오래 걸리므로, 만약 한 번만 실행되는 코드라면 컴파일하지 않고 인터프리팅하는 것이 훨씬 유리하다. 따라서, JIT 컴파일러를 사용하는 JVM들은 내부적으로 해당 메서드가 얼마나 자주 수행되는지 체크하고, 일정 정도를 넘을 때에만 컴파일을 수행한다.
        
*참고
-JRE는 자바 API와 JVM으로 구성되며, JVM의 역할은 자바 애플리케이션을 클래스 로더(Class Loader)를 통해 읽어 들여서 자바 API와 함께 실행하는 것입니다.


-----------위에 정리한 GC 동작과 달라서 따로 복사해서 밑에 정리.. 무엇이맞을까..?0------------

GC는 Minor GC와 Major GC로 나뉜다.

- Minor GC : New 영역에서 일어나는 GC

1. 최초에 객체가 생성되면 Eden영역에 생성된다.

2. Eden영역에 객체가 가득차게 되면 첫 번째 CG가 일어난다.

3. survivor1 영역에 Eden영역의 메모리를 그대로 복사된다. 그리고 survivor1 영역을 제외한 다른 영역의 객체를 제거한다.

4. Eden영역도 가득차고 survivor1영역도 가득차게된다면, Eden영역에 생성된 객체와 survivor1영역에 생성된 객체 중에 참조되고 있는 객체가 있는지 검사한다.

5. 참조 되고있지 않은 객체는 내버려두고 참조되고 있는 객체만 survivor2영역에 복사한다.

6. survivor2영역을 제외한 다른 영역의 객체들을 제거한다.

7. 위의 과정중에 일정 횟수이상 참조되고 있는 객체들을 survivor2에서 Old영역으로 이동시킨다.

- 위 과정을 계속 반복, survivor2영역까지 꽉차기 전에 계속해서 Old로 비움


- Major GC(Full GC) : Old 영역에서 일어나는 GC

1. Old 영역에 있는 모든 객체들을 검사하며 참조되고 있는지 확인한다.

2. 참조되지 않은 객체들을 모아 한 번에 제거한다.

- Minor GC보다 시간이 훨씬 많이 걸리고 실행중에 GC를 제외한 모든 쓰레드가 중지한다.



* Major GC(Full GC)가 일어나면,

Old영역에 있는 참조가 없는 객체들을 표시하고 그 해당 객체들을 모두 제거하게 된다.

그러면서 Heap 메모리 영역에 중간중간 구멍(제거되고 빈 메모리 공간)이 생기는데 이 부분을 없애기 위해 재구성을 하게 된다. (디스크 조각모음처럼 조각난 메모리를 정리함)

따라서 메모리를 옮기고 있는데 다른 쓰레드가 메모리를 사용해버리면 안되기 때문에 모든 쓰레드가 정지하게 되는 것이다.



출처: https://jeong-pro.tistory.com/148 [기본기를 쌓는 정아마추어 코딩블로그]

------------------------------------------

참고사이트 : https://juyoung-1008.tistory.com/43
        https://sehun-kim.github.io/sehun/JVM/#:~:text=Runtime%20Constant%20Pool-,%2D%20PC%20Register,%EC%9C%84%ED%95%9C%20%EC%9A%A9%EB%8F%84%EB%A1%9C%20%EC%82%AC%EC%9A%A9%ED%95%9C%EB%8B%A4.
        https://toma0912.tistory.com/2
        심도있게 JVM 분석 : https://d2.naver.com/helloworld/1230
        https://stophyun.tistory.com/37
        

클래스로더 -> 메모리 -> 실행엔진 그림 굿 : https://it-mesung.tistory.com/131

여기보면서 정리 좀더 할것 : https://yaboong.github.io/java/2018/06/09/java-garbage-collection/